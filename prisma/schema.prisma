// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id      String      @id @default(uuid())
  email   String      @unique
  password String     @db.VarChar(100)
  reNewPassword Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]

  @@map("auths")
}

model User {
  id      String   @id @default(uuid())
  authId  String    @unique
  name    String   @db.VarChar(255)
  departmentId Int
  role    actorRole 
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth Auth @relation(fields: [authId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  progressTicket ProgressTicket[]
  ticketUser TicketUser[]
  permitUser PermitUser[]

  @@map("users")
}

model Ticket {
  id      String      @id @default(uuid())
  ticketId String      @unique
  permitName String     @db.VarChar(255)
  permitCategoryId Int
  institutionId Int
  ownerDepartmentId Int
  description String?
  status   ticketStatus?
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permitCategory PermitCategory @relation(fields: [permitCategoryId], references: [id])
  department Department @relation(fields: [ownerDepartmentId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  progressTicket ProgressTicket[]
  ticketUser TicketUser[]

  @@map("tickets")
}

model PermitCategory {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]
  permits Permit[]

  @@map("permitCategories")
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]
  users User[]
  permits Permit[]

  @@map("departments")
}

model Institution {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]
  permits Permit[]

  @@map("institutions")
}

model ProgressTicket {
  id      Int @id @default(autoincrement())
  ticketId String     
  status   ticketStatus
  description String
  userId String
  urlDocs String?
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@map("progressTickets")
}

model TicketUser {
  id Int @id @default(autoincrement())
  ticketId String
  userId String
  ticketRole String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("ticketUsers")
}

model Permit {
  id String      @id @default(uuid())
  permitCategoryId Int
  ownerDepartmentId Int
  institutionId Int
  permitId String
  permitName String
  permitNumber String
  issuedDate DateTime
  validityPeriod String
  expireDate DateTime
  description String
  renewalRequirement String
  notification String
  urlDocument String
  preparationPeriod String
  status permitStatus
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permitCategory PermitCategory @relation(fields: [permitCategoryId], references: [id])
  department Department @relation(fields: [ownerDepartmentId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  permitUser PermitUser[]

  @@map("permits")
}

model PermitUser {
  id Int @id @default(autoincrement())
  permitId String
  userId String
  permitRole String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permit Permit @relation(fields: [permitId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("permitUsers")
}



enum actorRole {
  USER
  ADMIN
  EXTERNAL_RELATION
  MANAGEMENT
}

enum ticketStatus {
  PREPARING
  SUBMITING
  VERIFICATION
  FEEDBACK
  APPROVAL
  COMPLETE
  CLOSED
}

enum permitStatus {
  VALID
  EXPIRED
  INVALID
}