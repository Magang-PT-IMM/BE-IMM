generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String      @db.VarChar(100)
  reNewPassword Boolean  @default(false)
  role        actorRole  
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User[]

  @@map("auths")
}

model User {
  id          String   @id @default(uuid())
  authId      String   @unique
  name        String   @db.VarChar(255)
  departmentId String?
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  auth        Auth      @relation(fields: [authId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  userObligations UserObligation[]
  notificationLogs NotificationLog[]
  userProgressObligations UserProgressObligation[]

  @@map("users")
}

model Department {
  id                String       @id @default(uuid())
  name              String
  parentDepartmentId String?
  parentDepartment  Department?  @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  subDepartments    Department[] @relation("DepartmentHierarchy")
  deletedAt         DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  notificationLogs NotificationLog[]

  @@map("departments")
}

model Institution {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  obligations Obligation[]
  notificationLogs NotificationLog[]

  @@map("institutions")
}

model Obligation {
  id          String   @id @default(uuid())
  name        String
  type        obligationsType
  category    obligationsCategory?
  institutionId String?
  description String?
  dueDate     DateTime
  status      obligationsStatus
  latestUpdate DateTime?
  deletedAt   DateTime?
  renewal        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  latestRemember DateTime?

  institution Institution? @relation(fields: [institutionId], references: [id])

  userObligations UserObligation[]
  userProgressObligations UserProgressObligation[]
  notificationLogs NotificationLog[]
  @@map("obligations")
}

model UserObligation {
  id          String   @id @default(uuid())
  userId      String
  obligationId String
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  obligation  Obligation @relation(fields: [obligationId], references: [id])

  @@map("user_obligations")
}

model UserProgressObligation {
  id          String   @id @default(uuid())
  userId String
  obligationId String
  status      obligationsStatus
  description String?
  urlDocs     String?
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User @relation(fields: [userId], references: [id])
  obligation  Obligation @relation(fields: [obligationId], references: [id])

  @@map("user_progress_obligations")
}

model NotificationLog {
  id          String   @id @default(uuid())
  userId      String?
  departmentId String?
  obligationId String?
  institutionId String?
  status      String
  sentAt      DateTime @default(now())
  createdAt   DateTime @default(now())

  user        User?      @relation(fields: [userId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  obligation  Obligation? @relation(fields: [obligationId], references: [id])
  institution Institution? @relation(fields: [institutionId], references: [id])

  @@map("notification_logs")
}




enum actorRole {
  PIC
  HEAD_DEPT
  ADMIN
  MANAGEMENT
}

enum obligationsType {
  REPORT
  PAYMENT
  OTHER
}

enum obligationsCategory {
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY
}

enum obligationsStatus {
  PREPARING
  PROCESS
  VERIFICATION
  COMPLETE_ON_TIME
  COMPLETE_OVERDUE
  OVERDUE
}
